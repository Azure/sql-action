name: pr-check

# Note: If you need to make changes to this file, please use a branch off the main branch instead of a fork.
# The pull_request target from a forked repo will not have access to the secrets needed for this workflow.

on:
  pull_request_target:

  pull_request:
    paths:
      - '.github/workflows/**'

jobs:
  deploy:
    environment: Automation test # this environment requires approval before running the action
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        matrix_id: [1, 2] # Unique ID for each parallel job run, part of TEST_DB name to ensure no collisions from parallel jobs
        include:
          # Includes the connection string Github secret name, effectively a switch statement on matrix_id
          - matrix_id: 1
            connection_string_secret: AZURE_SQL_CONNECTION_STRING_NO_DATABASE # tests SQL login
          - matrix_id: 2
            connection_string_secret: AAD_PASSWORD_CONNECTION_STRING_NO_DATABASE # tests AAD password auth

    env:
      TEST_DB: 'SqlActionTest-${{ matrix.os }}-${{ matrix.matrix_id }}'

    steps:
    - name: Checkout from PR branch
      uses: actions/checkout@v2
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Installing node_modules
      run: npm install

    - name: Build GitHub Action
      run: npm run build

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Deploy a DACPAC with only a table to server
    - name: Test DACPAC Action
      uses: ./
      with:
        connection-string: '${{ secrets[matrix.connection_string_secret] }}Initial Catalog=${{ env.TEST_DB }};'
        tenant-id: '${{ secrets.AAD_TENANT_ID }}'
        dacpac-package: ./__testdata__/sql-action.dacpac

    # Build and publish sqlproj that should create a new view
    - name: Test Build and Publish
      uses: ./
      with:
        connection-string: '${{ secrets[matrix.connection_string_secret] }}Initial Catalog=${{ env.TEST_DB }};'
        tenant-id: '${{ secrets.AAD_TENANT_ID }}'
        project-file: ./__testdata__/TestProject/sql-action.sqlproj

    # Execute testsql.sql via SQLCMD on server
    - name: Test SQL Action
      uses: ./
      with:
        connection-string: '${{ secrets[matrix.connection_string_secret] }}Initial Catalog=${{ env.TEST_DB }};'
        tenant-id: '${{ secrets.AAD_TENANT_ID }}'
        sql-file: ./__testdata__/testsql.sql

    - name: Set database name for cleanup
      if: always()
      run: sed 's/$(DbName)/${{ env.TEST_DB }}/' > ${{ runner.temp }}/cleanup.sql

    - name: Cleanup Test Database
      if: always()
      uses: ./
      with: 
        connection-string: '${{ secrets[matrix.connection_string_secret] }}Initial Catalog=master;'
        tenant-id: '${{ secrets.AAD_TENANT_ID }}'
        sql-file: ${{ runner.temp }}/cleanup.sql
