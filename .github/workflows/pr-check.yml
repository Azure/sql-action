name: pr-check

# Note: If you need to make changes to this file, please use a branch off the main branch instead of a fork.
# The pull_request target from a forked repo will not have access to the secrets needed for this workflow.

on:
  pull_request_target:

  pull_request:
    paths:
      - '.github/workflows/**'

jobs:
  deploy:
    environment: Automation test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    env:
      TEST_DB: 'SqlActionTest-${{ matrix.os }}'

    steps:
    - name: Checkout from PR branch
      uses: actions/checkout@v2
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Installing node_modules
      run: npm install

    - name: Build GitHub Action
      run: npm run build

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Deploy a DACPAC with only a table to server
    - name: Test DACPAC Action
      uses: ./
      with:
        connection-string: '${{ secrets.AZURE_SQL_CONNECTION_STRING_NO_DATABASE }}Initial Catalog=${{ env.TEST_DB }};'
        dacpac-package: ./__testdata__/sql-action.dacpac

    # Build and publish sqlproj that should create a new view
    - name: Test Build and Publish
      uses: ./
      with:
        connection-string: '${{ secrets.AZURE_SQL_CONNECTION_STRING_NO_DATABASE }}Initial Catalog=${{ env.TEST_DB }};'
        project-file: ./__testdata__/TestProject/sql-action.sqlproj

    # Execute testsql.sql via SQLCMD on server
    - name: Test SQL Action
      uses: ./
      with:
        connection-string: '${{ secrets.AZURE_SQL_CONNECTION_STRING_NO_DATABASE }}Initial Catalog=${{ env.TEST_DB }};'
        sql-file: ./__testdata__/testsql.sql

    - name: Cleanup Test Database
      uses: ./
      with: 
        connection-string: '${{ secrets.AZURE_SQL_CONNECTION_STRING_NO_DATABASE }}Initial Catalog=master;'
        sql-file: ./__testdata__/cleanup.sql
        arguments: '-v DbName="${{ env.TEST_DB }}"'
