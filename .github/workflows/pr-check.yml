name: pr-check

# Note: If you need to make changes to this file, please use a branch off the main branch instead of a fork.
# The pull_request target from a forked repo will not have access to the secrets needed for this workflow.

on:
  pull_request_target:

  pull_request:
    paths:
      - '.github/workflows/**'

jobs:
  deploy:
    environment: Automation test # this environment requires approval before running the action
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        auth_type: [sql_login, aad_password, service_principal] # Unique for each parallel job run, part of TEST_DB name to ensure no collisions from parallel jobs

    env:
      TEST_DB: 'SqlActionTest-${{ matrix.os }}-${{ matrix.auth_type }}'

    steps:
    - name: Build connection string environment variable based on matrix auth_type
      run: |
        if [[ ${{ matrix.auth_type }} == sql_login ]]; then
          echo Setting connection strings with SQL login authentication
          echo "DB_CONNECTION_STRING='Server=${{ secrets.AZURE_SERVER_NAME }};Database=${{ env.TEST_DB }};User Id=${{ secrets.SQL_LOGIN_USER }};Password=${{ secrets.SQL_LOGIN_PASSWORD }};'" >> $GITHUB_ENV
          echo "MASTER_CONNECTION_STRING='Server=${{ secrets.AZURE_SERVER_NAME }};Database=master;User Id=${{ secrets.SQL_LOGIN_USER }};Password=${{ secrets.SQL_LOGIN_PASSWORD }};'" >> $GITHUB_ENV
        elif [[ ${{ matrix.auth_type }} == aad_password ]]; then
          echo Setting connection strings with AAD password authentication
          echo "DB_CONNECTION_STRING='Server=${{ secrets.AZURE_SERVER_NAME }};Database=${{ env.TEST_DB }};Authentication=Active Directory Password;User Id=${{ secrets.AAD_PASSWORD_USER }};Password=${{ secrets.AAD_PASSWORD_PASSWORD }};'" >> $GITHUB_ENV
          echo "MASTER_CONNECTION_STRING='Server=${{ secrets.AZURE_SERVER_NAME }};Database=master;Authentication=Active Directory Password;User Id=${{ secrets.AAD_PASSWORD_USER }};Password=${{ secrets.AAD_PASSWORD_PASSWORD }};'" >> $GITHUB_ENV
        elif [[ ${{ matrix.auth_type }} == service_principal ]]; then
          echo Setting connection strings with AAD service principal authentication
          echo "DB_CONNECTION_STRING='Server=${{ secrets.AZURE_SERVER_NAME }};Database=${{ env.TEST_DB }};Authentication=Active Directory Service Principal;User Id=${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }};Password=${{ secrets.SERVICE_PRINCIPAL_CLIENT_SECRET }};'" >> $GITHUB_ENV
          echo "MASTER_CONNECTION_STRING='Server=${{ secrets.AZURE_SERVER_NAME }};Database=master;Authentication=Active Directory Service Principal;User Id=${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }};Password=${{ secrets.SERVICE_PRINCIPAL_CLIENT_SECRET }};'" >> $GITHUB_ENV
        fi

    - name: Checkout from PR branch
      uses: actions/checkout@v2
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Installing node_modules
      run: npm install

    - name: Build GitHub Action
      run: npm run build

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Deploy a DACPAC with only a table to server
    - name: Test DACPAC Action
      uses: ./
      with:
        connection-string: '${{ env.DB_CONNECTION_STRING }}'
        tenant-id: '${{ secrets.AAD_TENANT_ID }}'
        dacpac-package: ./__testdata__/sql-action.dacpac

    # Build and publish sqlproj that should create a new view
    - name: Test Build and Publish
      uses: ./
      with:
        connection-string: '${{ env.DB_CONNECTION_STRING }}'
        tenant-id: '${{ secrets.AAD_TENANT_ID }}'
        project-file: ./__testdata__/TestProject/sql-action.sqlproj

    # Execute testsql.sql via script action on server
    - name: Test SQL Action
      uses: ./
      with:
        connection-string: '${{ env.DB_CONNECTION_STRING }}'
        tenant-id: '${{ secrets.AAD_TENANT_ID }}'
        sql-file: ./__testdata__/testsql.sql

    - name: Set database name for cleanup
      if: always()
      run: sed 's/$(DbName)/${{ env.TEST_DB }}/' ./__testdata__/cleanup.sql > ${{ runner.temp }}/cleanup.sql

    - name: Cleanup Test Database
      if: always()
      uses: ./
      with: 
        connection-string: '${{ env.MASTER_CONNECTION_STRING }}'
        tenant-id: '${{ secrets.AAD_TENANT_ID }}'
        sql-file: ${{ runner.temp }}/cleanup.sql
